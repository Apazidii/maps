
# Класс клетки
# Элементы:
#
# Moved
# По умолчанию имеет значени false
# Показатель того, была ли уже эта
# клетка обработана алгоритмом
# См. Алгоритм Ли
#
# Distance
# По умолчанию имеет значение 1000
# В ходе ввыполнения алгоритма будет заменятся
# на наикрайчашуюю длину пути от точка старта
# См. Алгоритм Ли
#
# ClassRoom
# Динамическая переменная
# В ней содержится номер аудитории к которой принадлежит данная клетка
#
# NCR - Neighboring Class Room
# Это массив с номерами кабинетов c которыми граничит данная клетка
#
# start, finish
# Это массивы сотоящиий из 2 элементов int
# Координаты краев клетки на карте
class Cell:
    Moved = False
    Distance = 1000
    def __init__(self,ClassRoom,NCR,start,finish, DoorS, DoorF ):
        self.ClassRoom = ClassRoom
        self.NCR = NCR
        self.start = start
        self.finish = finish
        self.DoorS = DoorS
        self.DoorF = DoorF



x = {
    1 :  Cell(  1 , [22,23] , [21,44] , [29,48] , [] , []),
    2 :  Cell(  2 , [23,24] , [21,55] , [29,58] , [] , []),
    3 :  Cell(  3 , [24,25] , [21,65] , [29,68] , [] , []),
    4 :  Cell(  4 , [25, 5] , [21,76] , [29,80] , [] , []),
    5 :  Cell(  5 , [ 4, 6] , [21,81] , [30,89] , [] , []),
    6 :  Cell(  6 , [ 5, 7] , [31,89] , [40,81] , [] , []),
    7 :  Cell(  7 , [ 6, 8] , [41,89] , [50,81] , [] , []),
    8 :  Cell(  8 , [ 7, 9] , [51,89] , [60,81] , [] , []),
    9 :  Cell(  9 , [ 8,10,12] , [61,89] , [70,81] , [] , []),
    10 : Cell( 10 , [ 9,11,12] , [71,89] , [78,86] , [] , []),
    11 : Cell( 11 , [10,12] , [79,89] , [79,85] , [] , []),
    12 : Cell( 12 , [11,10,26] , [79,84] , [71,80] , [] , []),
    13 : Cell( 13 , [26,27] , [79,72] , [71,64] , [] , []),
    14 : Cell( 14 , [28,29] , [79,51] , [71,47] , [] , []),
    15 : Cell( 15 , [30,31] , [79,32] , [71,26] , [] , []),
    16 : Cell( 16 , [31,17] , [79,19] , [77,12] , [] , []),
    17 : Cell( 17 , [16,31,18] , [76,19] , [60,11] , [] , []),
    18 : Cell( 18 , [17,19] , [59,19] , [40,11] , [] , []),
    19 : Cell( 19 , [18,20] , [39,19] , [21,11] , [] , []),
    20 : Cell( 20 , [19,21] , [21,24] , [29,20] , [] , []),
    21 : Cell( 21 , [20,22] , [21,34] , [29,25] , [] , []),
    22 : Cell( 22 , [21, 1] , [21,43] , [29,36] , [] , []),
    23 : Cell( 23 , [ 1, 2] , [21,54] , [29,49] , [] , []),
    24 : Cell( 24 , [ 2, 3] , [21,64] , [29,59] , [] , []),
    25 : Cell( 25 , [ 3, 4] , [21,75] , [29,69] , [] , []),
    26 : Cell( 26 , [12,13] , [71,80] , [79,74] , [] , []),
    27 : Cell( 27 , [13,28] , [71,64] , [79,60] , [] , []),
    28 : Cell( 28 , [14,27] , [71,59] , [79,53] , [] , []),
    29 : Cell( 29 , [30,14] , [71,47] , [79,41] , [] , []),
    30 : Cell( 30 , [15,29] , [71,40] , [79,34] , [] , []),
    31 : Cell( 31 , [15,16,17] , [71,26] , [79,21] , [] , [])





}

#k = "1 [21,44]-1 [29,48]-2 [21,55]-2 [29,58]-3 [21,65]-3 [29,68]-4 [21,76]-4 [29,80]-5 [21,81]-5 [30,89]-6 [31,89]-6 [40,81]-7 [41,89]-7 [50,81]-8 [51,89]-8 [60,81]-9 [61,89]-9 [70,81]-10 [71,89]-10 [78,86]-11 [79,89]-11 [79,85]-12 [79,84]-12 [71,80]-13 [79,72]-13 [71,64]-14 [79,51]-14 [71,47]-15 [79,32]-15 [71,26]-16 [79,19]-16 [77,12]-17 [76,19]-17 [60,11]-18 [59,19]-18 [40,11]-19 [39,19]-19 [21,11]-20 [21,24]-20 [29,20]-21 [21,34]-21 [29,25]-22 [21,43]-22 [29,36]-23 [21,54]-23 [29,49]-24 [21,64]-24 [29,59]-25 [21,75]-25 [29,69]-26 [71,80]-26 [79,74]-27 [71,64]-27 [79,60]-28 [71,59]-28 [79,53]-29 [71,47]-29 [79,41]-30 [71,40]-30 [79,34]-31 [71,26]-31 [79,21]"



